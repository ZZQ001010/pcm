<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.8.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<!-- 数据库连接基本属性 -->
		<property name="url" value="#{env.jdbcUrl}" />
		<property name="username" value="#{env.jdbcUsername}" />
		<property name="password" value="#{env.jdbcPassword}" />
		<property name="driverClassName" value="#{env['jdbcDriver']}" />
		<!-- 配置连接池初始化大小、最小、最大 -->
		<property name="initialSize" value="#{env['initialSize'] ?: 2}" />
		<property name="maxActive" value="#{env['jdbcMaxActive'] ?: 20}" />
		<property name="minIdle" value="#{env['jdbcMinIdle'] ?: 2 }" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="#{env['maxWait']?: 60000}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="#{env['timeBetweenEvictionRunsMillis']?: 60000}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="#{env['jdbcMinEvictableIdleTimeMillis'] ?: 300000}" />
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
		<property name="validationQuery" value="#{env['jdbcTestSql']?:'select 1 from dual'}" />
		<!-- 申请连接的时候检测 -->
		<property name="testWhileIdle" value="#{env['jdbcTestWhileIdle']?: true}" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
		<property name="testOnBorrow" value="#{env['jdbcTestOnBorrow']?: false}" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
		<property name="testOnReturn" value="#{env['jdbcTestOnReturn']?: false}" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<!-- 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false -->
		<property name="poolPreparedStatements" value="#{env['poolPreparedStatements'] ?: false}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		<!-- 配置监控统计拦截的filters -->
		<!-- 通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat;日志用的filter:log4j;防御SQL注入的filter:wall -->
		<!-- <property name="filters" value="stat" /> -->
	</bean>

	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<description>
			定义EntityManagerFactory，用于Spring控制事务。
			具体的Hibernate配置在persistence.xml中控制，包括JPA Provider和Hibernate的各种参数（不含组件扫描)。
			为了避免在JavaEE容器使用默认的persistence.xml进行自动配置JPA，这里额外指定了文件名。
		</description>
		<property name="dataSource" ref="dataSource" />
		<property name="persistenceUnitName" value="default" />
		<property name="packagesToScan">
			<list>
				<value>cn.sunline.**.infrastructure.shared.model</value>
			</list>
		</property>
		<property name="persistenceProviderClass" value="org.hibernate.jpa.HibernatePersistenceProvider" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="database" value="DEFAULT" />
				<property name="generateDdl" value="false" />
			</bean>
		</property>
		<property name="jpaPropertyMap">
			<map>
				<entry key="hibernate.dialect" value="#{T(cn.sunline.dbs.KD).dialect(env.jdbcDriver).getName()}" />
				<entry key="hibernate.show_sql" value="#{env['hibernateShowSql']?:true}" />
				<entry key="hibernate.format_sql" value="false" />
				<entry key="hibernate.generate_statistics" value="false" />
				<entry key="hibernate.hbm2ddl.auto" value="#{env['databaseInit']=='true'?'update':'none'}" />
				<entry key="hibernate.max_fetch_depth" value="1" />
				<entry key="hibernate.validation.mode" value="none" />
			</map>
		</property>
	</bean>

	<!-- 兼容Hibernate的SessionFactory，以便于批量的游标使用 -->
	<bean id="sessionFactory" factory-bean="entityManagerFactory" factory-method="getSessionFactory" />

	<!-- 事务设置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- 事务使用AspectJ进行编译时Weave -->
	<tx:annotation-driven mode="aspectj" transaction-manager="transactionManager" />

	<!-- Spring Data -->
	<jpa:repositories base-package="cn.sunline.**.infrastructure.server.repos" />
	
</beans>
